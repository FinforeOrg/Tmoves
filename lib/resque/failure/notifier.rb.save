require 'net/smtp'
module Resque
  module Failure
    # Send an email to the developer, so we know something went foul.
    class Notifier < Base
 
      class << self
        attr_accessor :smtp, :sender, :recipients
      end
 
      def self.configure
        yield self
        Resque::Failure.backend = self unless Resque::Failure.backend == Resque::Failure::Multiple
      end
 
      def save message_header =''
      message_header << "From: Finfore Stream <info@finfore.net>\r\n" 
      message_header << "To: Yacobus Reinhart <yacobus.reinhart@gmail.com>\r\n" 
      message_header << "Subject: A Worker Is Death
      msgstr = <<END_OF_MESSAGE Subject: [Resque] #{exception}
account\r\n" Queue: #{queue} Worker: #{worker}
 
#{payload.inspect}
      if user.email_home != user.email_work
        message_header << "cc: #{user.email_home}\r\n"#{exception}
      end#{exception.backtrace.join("\n")} END_OF_MESSAGE

        Net::SMTP.start(self.class.smtp[:address], 
self.class.smtp[:port], 
self.class.smtp[:domain],self.class.smtp[:account],self.class.smtp[:password], 
self.class.smtp[:type]) do |smtp|
      message_header << "Date: " + Time.now.to_s + "\r\n" 
smtp.send_message(msgstr, self.class.sender, self.class.recipients)
      message = message_header + "\r\n        end
	stream_task = StreamTask.find_by_worker(worker)
        if stream_task
         stream_task.update_attribute({:status=>'failed'})
        end

      rescue
      end
    end
  end
end
